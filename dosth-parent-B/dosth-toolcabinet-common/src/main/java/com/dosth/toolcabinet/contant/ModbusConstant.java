package com.dosth.toolcabinet.contant;

/**
 * Modbus常量
 * 
 * @author guozhidong
 *
 */
public class ModbusConstant {
	/** COILS起始地址 */
	public static final int START_ADDRESS = 0x00;
	/** COILS的偏移量 */
	public static final int COILS_OFFSET = 8;
	/** 升降料斗SlaveId */
	public static final int OUT_SLAVE_ID = 0x01;
	
	/**
	 * 异常重置
	 */
	public static byte[] FAULT_RESET = new byte[] {
			0x00, 0x07, // 此次通信事务处理标识符,一般每次通信后被要求加上1以区别不同的通信数据报文
			0x00, 0x00, // 表示协议标识符,00 00为modbus协议
			0x00, 0x1B, // 数据长度,用来只是接下来数据的长度,单位为节
			0x01, // 设备地址
			0x10, // 功能码, 此时代码10为写入寄存器数据
			0x00, 0x00, // 起始地址
			0x00, 0x0A, // 写寄存器数量
			0x14, // 写入数据的字节个数
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	
	/**
	 * 写入位操作
	 */
	public static byte[] WRITE_BIT = new byte[] {
			0x00, 0x07, // 此次通信事务处理标识符,一般每次通信后被要求加上1以区别不同的通信数据报文
			0x00, 0x00, // 表示协议标识符,00 00为modbus协议
			0x00, 0x06, // 数据长度,用来只是接下来数据的长度,单位为节
			0x01, // 设备地址
			0x06, // 功能码, 此时代码06为写入寄存器数据
			0x00, 0x06, // 定位指示灯寄存器地址
			0x00, (byte) 511 // 写入的数据
	};

	/**
	 * 读位操作
	 */
	public static final byte[] READ_BIT = new byte[] {
			0x00, 0x07, // 此次通信事务处理标识符,一般每次通信后被要求加上1以区别不同的通信数据报文
			0x00, 0x00, // 表示协议标识符,00 00为modbus协议
			0x00, 0x06, // 数据长度,用来只是接下来数据的长度,单位为节
			0x01, // 设备地址
			0x03, // 功能码, 此时代码03为读出寄存器数据
			0x00, 0x00, // 起始地址
			0x00, 0x0A // 读寄存器数量
	};
	
	/**
	 * 写入寄存器数据
	 */
	public static byte[] WRITE_REGISTER = new byte[] {
			0x00, 0x07, // 此次通信事务处理标识符,一般每次通信后被要求加上1以区别不同的通信数据报文
			0x00, 0x00, // 表示协议标识符,00 00为modbus协议
			0x00, 0x1B, // 数据长度,用来只是接下来数据的长度,单位为节
			0x01, // 设备地址
			0x10, // 功能码, 此时代码10为写入寄存器数据
			0x00, 0x0A, // 起始地址
			0x00, 0x0A, // 写寄存器数量
			0x14, // 写入数据的字节个数
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // 写入的数据
	};
	
	/**
	 * 读寄存器数据
	 */
	public static byte[] READ_REGISTER = new byte[] {
			0x00, 0x07, // 此次通信事务处理标识符,一般每次通信后被要求加上1以区别不同的通信数据报文
			0x00, 0x00, // 表示协议标识符,00 00为modbus协议
			0x00, 0x06, // 数据长度,用来只是接下来数据的长度,单位为节
			0x01, // 设备地址
			0x03, // 功能码, 此时代码03为读出寄存器数据
			0x00, 0x0A, // 起始地址
			0x00, 0x0A // 读寄存器数量
	};
}